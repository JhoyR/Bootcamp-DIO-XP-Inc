    Introdução ao MongoDB

    Código aberto;
    Alta performance;
    Schema-free;
    Utiliza bson(json) para armazenamento dos dados;
    Suporte a índices;
    Auto-Sharding (Escalamento Horizontal);
    Map-Reduce (Ferramenta de consulta e agregação);
    GridFS (Armazenamento de arquivos).

    Além disso, o MongoDB possui uma rica linguagem de consulta, o que proporciona fazer quase tudo dentro do banco de dados.
    
    O document é a menor unidade do MongoDB, sendo este, a referência de uma tupla (identifica seu registro). 
        (Seus dados não podem depender de outros dados, havendo, em alguns casos redundância)
    Collection é análoga à tabela, scheme-free. Dentro de uma Collection são armazenados os documentos.
    Embedding/linking é semelhante ao join.

    Quando usar?
        É muito indicado quando temos um grande volume de dados, dados não precisam ser necessariamente estruturados.

    Quando não usar?
        - Quando há a necessidade de relacionamentos/joins;
        - Propriedades ACID e transações são importantes;
        Curiosidade: Diversas entidades de pagamento não homologam sistemas cujos dados financeiros dos clientes
        não estejam em banco de dados relacionais tradicionais. Em algumas empresas, são utilizados bancos relacionais e não relacionais em paralelo.

    Instalação do MongoDB utilizando Docker
        Docker: 
            - Garante de forma fácil a criação e administração de ambientes de forma isolada;
            - Garante a rápida disponibilização do software para o usuário final.
            - Tem como objetivo a criação, teste e implementação de aplicações em um ambiente separado da máquina na qual será entregue (Conteinerização).
            - O objetivo principal é isolar o software de forma que seja possível instalá-lo em ambientes diferentes.
        
        Docker Compose:
            O Docker Compose é um arquivo onde especificamos as propriedades de cada contêiner. Além de fazer links entre diferentes contêineres, de forma que possua todo o ecossistema da aplicação configurado neste arquivo, permitindo subir a aplicação com todas as depencências.
        
            criar arquivo:
                docker-compose.yml
            
            no arquivo: 
                '3.9' (versão do docker compose)
                services: (estrutura para definição de serviços)
                    db:
                        image: mongo: (: para buscar a ultima versão)
                        container_name: db
                        restart: always
                        environment:
                         - MONGO_INITDB_ROOT_USERNAME=user 
                         - MONGO_INITDB_ROOT_PASSWORD=user
                        ports: (Portas escolhidas para serem expostas do conteiner)
                         - "27017:27017"
                        volumes:
                         - ./dbdata:/data/db
            
            * no terminal:
                # docker-compose up -d (para criar o conteiner, -d para não travar o terminal)
                # docker container ps (para listar todos os conteineres em execução na máquina)

                * para acessar: (quando o mongoDB estiver instalado na máquina)
                    (os comandos diretos com 'mongo' agora são feitos pelo shell do mongoDb, o mongosh)
                    #   mongosh --host 127.0.0.1.27017 -p user -u user
                    para acessar: mongosh mongodb://127.0.0.1:27017


                * para executar comando acima, é necessário ter instalado mongoDb e Mongosh (Mongo Shell)

                * Para acessar via Studio 3t:
                    Exemplo de codigo gerado com os passos acima 
                    # mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.1

        MongoDB Cloud:
            * mongodb.com (Baixar MongoDB Atlas - Try Free)
            * Criar cluster
            * Selecionar opção gratuita
            * Não selecionar nada, devido objetivo somente didático, somente criar.

        Para acessar:
            Copiar codigo gerado no mongo.cloud e colar no terminal, ou url de conexão quando utilizando compass
            Liberar ip da máquina, em casos de erro, pode ser necessário liberar qualquer ip

    Schema Design e boas práticas
        Embedding
            - Documentos autocontido (os relacionamentos ficam dentro dos documentos, são chamados de 'subdocumentos');
            - Pros:
                -- Consulta informações em uma única query;
                -- Atualiza o registro em uma única operação.
            - Contras:
                -- Limite de 16MB por documento.
        
        
        Referência
            - Documentos com dependência de outros documentos ou collections (Tem armazenados os ids dos outros documentos no atributo 'parts');
            - Pros:
                -- Documentos pequenos;
                -- Não duplica informação;
                -- (Usado quando os dados não são acessados em todas as consultas).
            -Contras:
                -- Duas ou mais queries ou utilização do $lookup (comando para olhar informações das referências).

        Recomendações de acordo com os relacionamentos:
            One-to-one: Prefira atributos de chave-valor no documento.
            One-to-few (ou, 'One-to-many' limitado): Prefira o embedding.
            One-to-many e Many-to-many:  Prefira referência.

        Existem padrões de uso para Schema Design, na documentação.

    Boas práticas:
        - Evite documentos muito grandes;
        - Use campos objetivos e curtos;
        - Analise as suas queries utilizando o explain();
        - Atualize apenas os campos alterados;
        - Evite negações em queries (NE);
        - Listas/Arrays dentro dos documentos não podem crescer sem limite.

    JSON vs BSON 
        - BSON:
            -- É uma serialização codificada em binário de documentos semelhantes ao JSON.
            -- Contém extensões que permitem a representação de tipos de dados que não fazem parte da especificação JSON. Por exemplo, BSON tem um tipo Date, ObjectID.


    Operações de manipulação de dados:
        - Criação de database: use nome_do_database
        - Se já existir, ele muda, se não, ele cria.
        - Ou, criar pela interface do Studio 3T.
        
        Para criar  a collection, passa-se alguns parâmetros: ("nome_da_collection", {parâmetros de configuração da collection})
        - Criar collection: db.createCollection("teste", {capped: true, max: 2, size: 2});
        - Listar collections: show collections;
        - Inserir collection no banco: db.nome_da_collection.insertOne({"parametros_da_collection"});
        - Ou de forma implícita: db.nome_da_collection.insertOne({"parametros_da_collection"});
        - Para atualizar: db.nome_da_collection.update({"documento_desejado"}, {operacao : {parametros_da_collection}}); 
            db.clients.update({"name": "james"}, {$set : {"age": 41}}); 
        - Para atualizar em varios documentos, passar ao final, o parâmetro {multi: true}, ou utilizar db.nome_da_collection.updateMany().
        - Para definir o tamanho da busca: ao final da query, inserir .limit(valor_limite)
        - Para filtrar: $in: [itens_a_serem_buscados];
        - Condição lógica Ou: $or: [{campo_1}, {campo_2}]
        - Condição para menor que: ({"parametro": {$lt: valor}}) ou $lte, para menor ou igual
        - Para excluir: db.nome_da_collection.deleteOne("documento_desejado": valor_desejado);
        - Pesquisar na documentação do mongoDB, para outras operações.

        Verificar termos/conceitos:
            Performance e indices;
            Scan collection.


    Agregações:
        Em clusters -> [...] -> Load Sample Dataset

        O que são?
            Agregação é o procedimento de processar os dados em uma ou mais etapas, onde o resultado de cada etapa é utilizado na etapa seguinte, de modo a retornar um resultado combinado.

        Agregações de propósito único
            - Count;
            - Distinct.
            Elas não permitem as customizações das agregações utilizando pipeline.
        

        As pipelines mais básicas fornecem "filtros" e "operadores".
            Operadores:
                $group
                $addFields

            Filtros:
                $sum;
                $avg;
                $max;
                $min;
            
            Operadores lógicos:
                $and;
                $or;
                $not;
                $nor;

            Também existem os operadores de comparação (vide documentação)

            https://www.mongodb.com/blog/post/building-with-patterns-a-summary

            https://www.mongodb.com/docs/manual/aggregation/